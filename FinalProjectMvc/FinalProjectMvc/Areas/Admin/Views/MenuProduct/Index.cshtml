    @using FinalProjectMvc.Helpers
@model PagedResult<FinalProjectMvc.ViewModels.Admin.MenuProduct.MenuProductVM>
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>
<link rel="stylesheet" href="~/assets/css/pagination.css">
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-xl-12">
            <div class="bg-light border rounded shadow-sm p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="mb-0" style="font-family: 'Georgia', serif; color: #6b4f3b;">
                        <i class="fas fa-box-open me-2"></i>Products Management
                    </h2>
                    <div class="d-flex gap-2">

                        <form asp-action="Index" method="get" class="d-flex">
                            <input type="text" name="search" value="@ViewBag.CurrentSearch"
                                   class="form-control me-2" placeholder="Search products..." style="width: 200px;height: 53px;">
                            <button type="submit" class="btn btn-outline-secondary">
                                <i class="fas fa-search"></i>
                            </button>
                        </form>
                        <a asp-action="Create" class="btn btn-outline-brown">
                            <i class="fa fa-plus me-1"></i> Add New Product
                        </a>
                    </div>
                </div>


                <div class="mb-3">
                    <small class="text-muted">
                        Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to
                        @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems))
                        of @Model.TotalItems products
                    </small>
                </div>

                @if (Model.Items.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-bordered text-center align-middle bg-white">
                            <thead>
                                <tr style="background-color: #5c3d2e; color: white;">
                                    <th style="width: 15%;">Name</th>
                                    <th style="width: 20%;">Ingredients</th>
                                    <th style="width: 8%;">Price</th>
                                    <th style="width: 12%;">Category</th>
                                    <th style="width: 8%;">Type</th>
                                    <th style="width: 12%;">Sizes</th>
                                    <th style="width: 15%;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                    <tr>
                                        <td class="fw-semibold">@item.Name</td>
                                        <td>
                                            <small class="text-muted">
                                                @(item.Ingredients?.Length > 50 ? item.Ingredients.Substring(0, 50) + "..." : item.Ingredients)
                                            </small>
                                        </td>
                                        <td class="fw-bold text-success">@item.Price.ToString("C")</td>
                                        <td>
                                            <span class="badge bg-info text-dark">@item.Category</span>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrWhiteSpace(item.CategoryTypeName))
                                            {
                                                if (item.CategoryTypeName == "Drink")
                                                {
                                                    <span class="badge bg-primary">
                                                        <i class="fas fa-glass-water me-1"></i>@item.CategoryTypeName
                                                    </span>
                                                }
                                                else if (item.CategoryTypeName == "Food")
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="fas fa-utensils me-1"></i>@item.CategoryTypeName
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@item.CategoryTypeName</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            @if (item.CategoryTypeName == "Drink" && item.Sizes != null && item.Sizes.Any())
                                            {
                                                @foreach (var size in item.Sizes)
                                                {
                                                    <span class="badge bg-light text-dark border me-1">@size</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">
                                                    <i class="fas fa-minus"></i>
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <div class="d-flex justify-content-center gap-2">
                                                <a asp-action="Detail" asp-route-id="@item.Id" title="View Details" class="btn btn-info btn-sm">
                                                    <i class="fa-solid fa-circle-info"></i>
                                                </a>
                                                <a asp-action="Edit" asp-route-id="@item.Id" title="Edit" class="btn btn-dark btn-sm">
                                                    <i class="fa-solid fa-pencil"></i>
                                                </a>
                                                <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="@item.Id" title="Delete">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>


                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Products pagination" class="mt-4">
                            <ul class="pagination justify-content-center">

                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-page="1" asp-route-search="@ViewBag.CurrentSearch">
                                            <i class="fas fa-angle-double-left"></i>
                                        </a>
                                    </li>
                                }


                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-search="@ViewBag.CurrentSearch">
                                            <i class="fas fa-angle-left"></i>
                                        </a>
                                    </li>
                                }


                                @{
                                    var startPage = Math.Max(1, Model.CurrentPage - 2);
                                    var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                                }

                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-search="@ViewBag.CurrentSearch">@i</a>
                                    </li>
                                }


                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-search="@ViewBag.CurrentSearch">
                                            <i class="fas fa-angle-right"></i>
                                        </a>
                                    </li>
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-search="@ViewBag.CurrentSearch">
                                            <i class="fas fa-angle-double-right"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-box-open fa-4x text-muted mb-3"></i>
                        @if (!string.IsNullOrEmpty(ViewBag.CurrentSearch))
                        {
                            <h4 class="text-muted">No Products Found for "@ViewBag.CurrentSearch"</h4>
                            <p class="text-muted">Try adjusting your search criteria.</p>
                            <a asp-action="Index" class="btn btn-secondary me-2">
                                <i class="fas fa-times me-1"></i> Clear Search
                            </a>
                        }
                        else
                        {
                            <h4 class="text-muted">No Products Found</h4>
                            <p class="text-muted">Start by adding your first product to the system.</p>
                        }
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="fa fa-plus me-1"></i> Add Product
                        </a>
                    </div>
                }


            </div>
        </div>
    </div>
</div>


<script src="~/assets/js/pagination.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".delete-btn");
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const productTableBody = document.querySelector("#productTable tbody");

        deleteButtons.forEach(btn => {
            btn.addEventListener("click", function () {
                const id = this.getAttribute("data-id");
                const row = this.closest("tr");

                Swal.fire({
                    title: "Are you sure?",
                    text: "This product will be permanently deleted!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/Admin/MenuProduct/Delete/${id}`, {
                            method: "POST",
                            headers: {
                                'RequestVerificationToken': token,
                                'X-Requested-With': 'XMLHttpRequest',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ id: id })
                        })
                        .then(response => {
                            if (response.ok) {
                                row.remove();
                                Swal.fire("Deleted!", "The product has been deleted.", "success");

                                if (productTableBody.children.length === 0) {
                                    const alertDiv = document.createElement('div');
                                    alertDiv.className = "alert alert-warning text-center mt-4";
                                    alertDiv.textContent = "No products found.";
                                    productTableBody.parentElement.parentElement.appendChild(alertDiv);
                                }
                            } else {
                                Swal.fire("Error!", "Something went wrong.", "error");
                            }
                        })
                        .catch(() => {
                            Swal.fire("Error!", "Unexpected error occurred.", "error");
                        });
                    }
                });
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    });
</script>