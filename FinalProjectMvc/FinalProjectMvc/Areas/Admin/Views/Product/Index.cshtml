@using FinalProjectMvc.Helpers
@model PagedResult<FinalProjectMvc.ViewModels.Admin.Product.ProductVM>

<link rel="stylesheet" href="~/assets/css/pagination.css">
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-xl-12">
            <div class="bg-light border rounded shadow-sm p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="mb-0" style="font-family: 'Georgia', serif; color: #6b4f3b;">
                        <i class="fas fa-box-open me-2"></i>Products Management
                    </h2>
                    <div class="d-flex gap-2">
                        <form id="searchForm" class="d-flex">
                            <input type="text" name="search" id="searchInput" value="@ViewBag.CurrentSearch"
                                   class="form-control me-2" placeholder="Search products..." style="width: 200px;height: 53px;">
                            <button type="submit" class="btn btn-outline-secondary">
                                <i class="fas fa-search"></i>
                            </button>
                        </form>

                        <a asp-action="Create" class="btn btn-outline-brown">
                            <i class="fa fa-plus me-1"></i> Add New Product
                        </a>
                    </div>
                </div>

                <!-- Loading indicator -->
                <div id="loadingIndicator" class="text-center py-3" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <!-- Content will be replaced by AJAX -->
                <div id="productTableContainer">
                    @await Html.PartialAsync("_ProductTablePartial", Model)
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/pagination.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const searchForm = document.getElementById('searchForm');
        const searchInput = document.getElementById('searchInput');
        const productTableContainer = document.getElementById('productTableContainer');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Search functionality
        function performSearch(query = '', page = 1, pageSize = 10) {
            // Show loading indicator
            loadingIndicator.style.display = 'block';
            productTableContainer.style.opacity = '0.5';

            const url = `/Admin/Product/Index?search=${encodeURIComponent(query)}&page=${page}&pageSize=${pageSize}`;

            fetch(url, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                productTableContainer.innerHTML = html;

                // Update URL without page refresh
                const newUrl = query ?
                    `/Admin/Product/Index?search=${encodeURIComponent(query)}&page=${page}&pageSize=${pageSize}` :
                    `/Admin/Product/Index?page=${page}&pageSize=${pageSize}`;
                window.history.pushState({}, '', newUrl);

                // Re-initialize event listeners
                initializeEventListeners();
            })
            .catch(error => {
                console.error('Error:', error);
                productTableContainer.innerHTML = '<div class="alert alert-danger">Error loading results. Please try again.</div>';
            })
            .finally(() => {
                // Hide loading indicator
                loadingIndicator.style.display = 'none';
                productTableContainer.style.opacity = '1';
            });
        }

        // Search form submission
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const query = searchInput.value.trim();
            performSearch(query, 1, getCurrentPageSize());
        });

        // Clear search input when empty and enter is pressed
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter' && this.value.trim() === '') {
                performSearch('', 1, getCurrentPageSize());
            }
        });

        // Get current page size
        function getCurrentPageSize() {
            const pageSizeSelect = document.getElementById('pageSizeSelect');
            return pageSizeSelect ? parseInt(pageSizeSelect.value) : 10;
        }

        // Initialize event listeners for dynamically loaded content
        function initializeEventListeners() {
            // Pagination links
            document.querySelectorAll('.ajax-page-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const page = this.getAttribute('data-page');
                    const search = this.getAttribute('data-search') || '';
                    performSearch(search, page, getCurrentPageSize());
                });
            });

            // Page size selector
            const pageSizeSelect = document.getElementById('pageSizeSelect');
            if (pageSizeSelect) {
                pageSizeSelect.addEventListener('change', function() {
                    const currentSearch = searchInput.value.trim();
                    performSearch(currentSearch, 1, this.value);
                });
            }

            // Clear search button
            const clearSearchBtn = document.getElementById('clearSearchBtn');
            if (clearSearchBtn) {
                clearSearchBtn.addEventListener('click', function() {
                    searchInput.value = '';
                    performSearch('', 1, getCurrentPageSize());
                });
            }

            // Delete buttons
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    const row = this.closest('tr');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'This product will be permanently deleted!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/Admin/Product/Delete/${id}`, {
                                method: 'POST',
                                headers: {
                                    'RequestVerificationToken': token,
                                    'X-Requested-With': 'XMLHttpRequest',
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ id: id })
                            })
                            .then(response => {
                                if (response.ok) {
                                    // Refresh the current view to update counts
                                    const currentSearch = searchInput.value.trim();
                                    const currentPage = getCurrentPage();
                                    performSearch(currentSearch, currentPage, getCurrentPageSize());
                                    Swal.fire('Deleted!', 'The product has been deleted.', 'success');
                                } else {
                                    Swal.fire('Error!', 'Something went wrong.', 'error');
                                }
                            })
                            .catch(() => {
                                Swal.fire('Error!', 'Unexpected error occurred.', 'error');
                            });
                        }
                    });
                });
            });
        }

        // Get current page from active pagination link
        function getCurrentPage() {
            const activePage = document.querySelector('.pagination .page-item.active .page-link');
            return activePage ? parseInt(activePage.textContent) : 1;
        }

        // Initialize event listeners on page load
        initializeEventListeners();

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>