@model FinalProjectMvc.ViewModels.Admin.Product.ProductCreateVM

@{
    ViewData["Title"] = "Add New Product";
    var showSizesSection = Model.CategoryTypesById != null
        && Model.CategoryTypesById.ContainsKey(Model.CategoryId)
        && (Model.CategoryTypesById[Model.CategoryId] == "Drink" || Model.CategoryTypesById[Model.CategoryId] == "1");
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8">
            <div class="bg-white p-4 rounded shadow-sm border">
                <h2 class="mb-4 text-center" style="font-family: 'Georgia', serif; color: #6b4f3b;">➕ Add New Product</h2>

                <form asp-action="Create" method="post" enctype="multipart/form-data">
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="form-label">Name</label>
                        <input asp-for="Name" class="form-control" placeholder="Enter product name" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="ImageFile" class="form-label">Image</label>
                        <input asp-for="ImageFile" class="form-control" type="file" />
                        <span asp-validation-for="ImageFile" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Ingredients" class="form-label">Ingredients</label>
                        <textarea asp-for="Ingredients" class="form-control" rows="3" placeholder="Enter ingredients"></textarea>
                        <span asp-validation-for="Ingredients" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Price" class="form-label">Price ($)</label>
                        <input asp-for="Price" class="form-control" placeholder="Enter price" />
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="form-label">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="Model.Categories" id="categorySelect">
                            <option disabled selected value="">-- Select Category --</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-4" id="sizesSection" style="@(showSizesSection ? "" : "display: none;")">
                        <label class="form-label">Sizes</label>

                        <!-- CategoryType 1 üçün avtomatik seçim mesajı -->
                        <div id="autoSizeMessage" class="alert alert-info mb-3" style="display: none;">
                            <strong>Info:</strong> Bu kateqoriya üçün Small, Medium və Large ölçüləri avtomatik seçilir.
                        </div>

                        <div>
                            @if (Model.Sizes != null && Model.Sizes.Any())
                            {
                                foreach (var size in Model.Sizes)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input"
                                               type="checkbox"
                                               name="SelectedSizeIds"
                                               value="@size.Value"
                                               id="size_@size.Value"
                                        @(Model.SelectedSizeIds != null && Model.SelectedSizeIds.Contains(int.Parse(size.Value)) ? "checked" : "") />
                                        <label class="form-check-label" for="size_@size.Value">@size.Text</label>
                                    </div>
                                }
                            }
                        </div>
                        <span asp-validation-for="SelectedSizeIds" class="text-danger"></span>
                    </div>

                    <!-- Drink kateqoriyası üçün validation mesajı -->
                    <div id="drinkSizeValidationAlert" class="alert alert-warning" style="display: none;">
                        <strong>Note:</strong> Please select at least 3 sizes for drink products.
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit"
                                class="btn btn-outline-primary"
                                style="color:brown; border: 1px solid brown; background-color: white;"
                                onmouseover="this.style.backgroundColor='brown'; this.style.color='white';"
                                onmouseout="this.style.backgroundColor='white'; this.style.color='brown';">
                            Submit
                        </button>
                        <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const categorySelect = document.getElementById('categorySelect');
        const sizesSection = document.getElementById('sizesSection');
        const sizeCheckboxes = document.querySelectorAll('input[name="SelectedSizeIds"]');
        const drinkSizeValidationAlert = document.getElementById('drinkSizeValidationAlert');
        const autoSizeMessage = document.getElementById('autoSizeMessage');
        const sizeValidationSpan = document.querySelector('span[data-valmsg-for="SelectedSizeIds"]');

        const categoryTypes = @Html.Raw(Json.Serialize(Model.CategoryTypesById ?? new Dictionary<int, string>()));

        const sizeNames = ['Small', 'Medium', 'Large'];
        const requiredSizeIds = [];

        sizeCheckboxes.forEach(checkbox => {
            const label = document.querySelector(`label[for="${checkbox.id}"]`);
            if (label && sizeNames.includes(label.textContent.trim())) {
                requiredSizeIds.push(parseInt(checkbox.value));
            }
        });

        function updateSizeSection(categoryId) {
            const categoryType = categoryTypes[categoryId];

            if (categoryType === 'Drink') {
                sizesSection.style.display = 'block';
                autoSizeMessage.style.display = 'none';

                sizeCheckboxes.forEach(cb => {
                    cb.disabled = false;
                });

                if (sizeValidationSpan && sizeValidationSpan.textContent.trim() !== '') {
                    drinkSizeValidationAlert.style.display = 'block';
                }
            } else if (categoryType === '1') {
                sizesSection.style.display = 'block';
                autoSizeMessage.style.display = 'block';
                drinkSizeValidationAlert.style.display = 'none';

                sizeCheckboxes.forEach(cb => {
                    cb.checked = false;
                    cb.disabled = true;
                });

           
                requiredSizeIds.forEach(sizeId => {
                    const checkbox = document.querySelector(`input[name="SelectedSizeIds"][value="${sizeId}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                        checkbox.disabled = false;
                    }
                });

                if (sizeValidationSpan) {
                    sizeValidationSpan.textContent = '';
                }
            } else {
                sizesSection.style.display = 'none';
                autoSizeMessage.style.display = 'none';
                drinkSizeValidationAlert.style.display = 'none';

                sizeCheckboxes.forEach(cb => {
                    cb.checked = false;
                    cb.disabled = false;
                });

                if (sizeValidationSpan) {
                    sizeValidationSpan.textContent = '';
                }
            }
        }

        function checkDrinkSizeValidation() {
            const categoryId = parseInt(categorySelect.value);
            const categoryType = categoryTypes[categoryId];

            if (categoryType === 'Drink') {
                const checkedSizes = document.querySelectorAll('input[name="SelectedSizeIds"]:checked');
                if (checkedSizes.length > 0 && checkedSizes.length < 3) {
                    drinkSizeValidationAlert.style.display = 'block';
                    drinkSizeValidationAlert.innerHTML = '<strong>Warning:</strong> Please select at least 3 sizes for drink products. Currently selected: ' + checkedSizes.length;
                    drinkSizeValidationAlert.className = 'alert alert-warning';
                } else if (checkedSizes.length >= 3) {
                    drinkSizeValidationAlert.style.display = 'none';
                } else if (checkedSizes.length === 0) {
                    drinkSizeValidationAlert.style.display = 'block';
                    drinkSizeValidationAlert.innerHTML = '<strong>Note:</strong> Please select at least 3 sizes for drink products.';
                    drinkSizeValidationAlert.className = 'alert alert-info';
                }
            }
        }

        categorySelect.addEventListener('change', function () {
            const categoryId = parseInt(this.value);
            if (!isNaN(categoryId)) {
                updateSizeSection(categoryId);
            }
        });

        sizeCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const categoryId = parseInt(categorySelect.value);
                const categoryType = categoryTypes[categoryId];

                if (categoryType === '1') {
                    if (requiredSizeIds.includes(parseInt(this.value))) {
                        this.checked = true; 
                        return;
                    }
                }

              
                if (categoryType === 'Drink') {
                    checkDrinkSizeValidation();
                }
            });
        });

        
        const initialCategoryId = parseInt(categorySelect.value);
        if (!isNaN(initialCategoryId)) {
            updateSizeSection(initialCategoryId);
            checkDrinkSizeValidation();
        }

        if (sizeValidationSpan && sizeValidationSpan.textContent.trim() !== '') {
            const categoryId = parseInt(categorySelect.value);
            const categoryType = categoryTypes[categoryId];
            if (categoryType === 'Drink') {
                drinkSizeValidationAlert.style.display = 'block';
                drinkSizeValidationAlert.innerHTML = '<strong>Error:</strong> ' + sizeValidationSpan.textContent;
                drinkSizeValidationAlert.className = 'alert alert-danger';
            }
        }
    });
</script>